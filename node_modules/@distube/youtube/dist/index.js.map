{"version":3,"sources":["../src/index.ts","../src/util.ts"],"sourcesContent":["import ytpl from \"@distube/ytpl\";\nimport ytsr from \"@distube/ytsr\";\nimport ytdl from \"@distube/ytdl-core\";\nimport { clone, parseNumber, toSecond } from \"./util\";\nimport { DisTubeError, ExtractorPlugin, Playlist, type ResolveOptions, Song, checkInvalidKey } from \"distube\";\n\nexport type YouTubePluginOptions = {\n  /**\n   * YouTube Cookies\n   */\n  cookies?: ytdl.Cookie[];\n  /**\n   * ytdl-core options\n   */\n  ytdlOptions?: ytdl.getInfoOptions;\n};\n\nexport class YouTubePlugin extends ExtractorPlugin {\n  #cookies?: ytdl.Cookie[];\n  cookies?: ytdl.Cookie[];\n  #ytdlOptions: ytdl.getInfoOptions;\n\n  constructor(options: YouTubePluginOptions = {}) {\n    super();\n    checkInvalidKey(options, [\"cookies\", \"ytdlOptions\"], \"YouTubePlugin\");\n    this.cookies = this.#cookies = options.cookies ? clone(options.cookies) : undefined;\n    this.#ytdlOptions = options?.ytdlOptions ? clone(options.ytdlOptions) : {};\n    this.#ytdlOptions.agent = ytdl.createAgent(this.cookies);\n  }\n\n  get ytdlOptions(): ytdl.getInfoOptions {\n    if (this.cookies !== this.#cookies) this.#ytdlOptions.agent = ytdl.createAgent((this.#cookies = this.cookies));\n    return this.#ytdlOptions;\n  }\n\n  get ytCookie(): string {\n    const agent = this.#ytdlOptions.agent;\n    if (!agent) return \"\";\n    const { jar } = agent;\n    return jar.getCookieStringSync(\"https://www.youtube.com\");\n  }\n\n  validate(url: string): boolean {\n    if (ytdl.validateURL(url) || ytpl.validateID(url)) return true;\n    return false;\n  }\n  async resolve<T>(url: string, options: ResolveOptions<T>) {\n    if (ytpl.validateID(url)) {\n      const info = await ytpl(url, { limit: Infinity, requestOptions: { headers: { cookie: this.ytCookie } } });\n      return new YouTubePlaylist(this, info, options);\n    }\n    if (ytdl.validateURL(url)) {\n      const info = await ytdl.getBasicInfo(url, this.ytdlOptions);\n      return new YouTubeSong(this, info, options);\n    }\n    throw new DisTubeError(\"CANNOT_RESOLVE_SONG\", url);\n  }\n  async getStreamURL<T = unknown>(song: YouTubeSong<T>): Promise<string> {\n    if (!song.url || !ytdl.validateURL(song.url)) throw new DisTubeError(\"CANNOT_RESOLVE_SONG\", song);\n    const info = await ytdl.getInfo(song.url, this.ytdlOptions);\n    if (!info.formats?.length) throw new DisTubeError(\"UNAVAILABLE_VIDEO\");\n    const newSong = new YouTubeSong(this, info, {});\n    song.ageRestricted = newSong.ageRestricted;\n    song.views = newSong.views;\n    song.likes = newSong.likes;\n    song.thumbnail = newSong.thumbnail;\n    song.related = newSong.related;\n    song.chapters = newSong.chapters;\n    song.storyboards = newSong.storyboards;\n    const format = info.formats\n      .filter(f => f.hasAudio && (!newSong.isLive || f.isHLS))\n      .sort((a, b) => Number(b.audioBitrate) - Number(a.audioBitrate) || Number(a.bitrate) - Number(b.bitrate))[0];\n    if (!format) throw new DisTubeError(\"UNPLAYABLE_FORMATS\");\n    return format.url;\n  }\n  async getRelatedSongs(song: YouTubeSong): Promise<Song[]> {\n    return (song.related ? song.related : (await ytdl.getBasicInfo(song.url!, this.ytdlOptions)).related_videos)\n      .filter(r => r.id)\n      .map(r => new YouTubeRelatedSong(this, r));\n  }\n  async searchSong<T>(query: string, options: ResolveOptions<T>): Promise<Song<T> | null> {\n    const result = await this.search(query, { type: SearchResultType.VIDEO, limit: 1 });\n    if (!result?.[0]) return null;\n    const info = result[0];\n    return new Song(\n      {\n        plugin: this,\n        source: \"youtube\",\n        playFromSource: true,\n        id: info.id,\n        name: info.name,\n        url: info.url,\n        thumbnail: info.thumbnail,\n        duration: info.duration,\n        views: info.views,\n        uploader: info.uploader,\n      },\n      options,\n    );\n  }\n\n  search(\n    string: string,\n    options?: { type?: SearchResultType.VIDEO; limit?: number; safeSearch?: boolean },\n  ): Promise<YouTubeSearchResultSong[]>;\n  search(\n    string: string,\n    options: { type: SearchResultType.PLAYLIST; limit?: number; safeSearch?: boolean },\n  ): Promise<YouTubeSearchResultPlaylist[]>;\n  search(\n    string: string,\n    options?: { type?: SearchResultType; limit?: number; safeSearch?: boolean },\n  ): Promise<YouTubeSearchResultSong[] | YouTubeSearchResultPlaylist[]>;\n  /**\n   * Search for a song.\n   *\n   * @param query              - The string search for\n   * @param options            - Search options\n   * @param options.limit      - Limit the results\n   * @param options.type       - Type of results (`video` or `playlist`).\n   * @param options.safeSearch - Whether or not use safe search (YouTube restricted mode)\n   *\n   * @returns Array of results\n   */\n  async search(\n    query: string,\n    options: {\n      type?: SearchResultType;\n      limit?: number;\n      safeSearch?: boolean;\n    } = {},\n  ): Promise<(YouTubeSearchResultSong | YouTubeSearchResultPlaylist)[]> {\n    const { items } = await ytsr(query, {\n      type: SearchResultType.VIDEO,\n      limit: 10,\n      safeSearch: false,\n      ...options,\n      requestOptions: { headers: { cookie: this.ytCookie } },\n    });\n    return items.map(i => {\n      if (i.type === \"video\") return new YouTubeSearchResultSong(this, i);\n      return new YouTubeSearchResultPlaylist(i);\n    });\n  }\n}\n\nexport class YouTubeSong<T = unknown> extends Song<T> {\n  chapters?: ytdl.Chapter[];\n  storyboards?: ytdl.storyboard[];\n  related?: ytdl.relatedVideo[];\n  constructor(plugin: YouTubePlugin, info: ytdl.videoInfo, options: ResolveOptions<T>) {\n    const i = info.videoDetails;\n    super(\n      {\n        plugin,\n        source: \"youtube\",\n        playFromSource: true,\n        id: i.videoId,\n        name: i.title,\n        isLive: Boolean(i.isLive),\n        duration: i.isLive ? 0 : toSecond(i.lengthSeconds),\n        url: i.video_url || `https://youtu.be/${i.videoId}`,\n        thumbnail: i.thumbnails?.sort((a, b) => b.width - a.width)?.[0]?.url,\n        views: parseNumber(i.viewCount || (<any>i).view_count || (<any>i).views),\n        likes: parseNumber(i.likes),\n        uploader: {\n          name: i.author?.name || i.author?.user,\n          url:\n            i.author?.channel_url || i.author?.external_channel_url || i.author?.user_url || i.author?.id\n              ? `https://www.youtube.com/channel/${i.author.id}`\n              : i.author?.user\n                ? `https://www.youtube.com/${i.author.user}`\n                : undefined,\n        },\n        ageRestricted: Boolean(i.age_restricted),\n      },\n      options,\n    );\n    this.chapters = i.chapters || [];\n    this.storyboards = i.storyboards || [];\n    this.related = info.related_videos || [];\n  }\n}\n\nexport class YouTubePlaylist<T> extends Playlist<T> {\n  constructor(plugin: YouTubePlugin, info: ytpl.result, options: ResolveOptions<T>) {\n    const songs = info.items.map(\n      i =>\n        new Song({\n          plugin,\n          playFromSource: true,\n          source: \"youtube\",\n          id: i.id,\n          name: i.title,\n          url: i.url,\n          thumbnail: i.thumbnail,\n          duration: toSecond(i.duration),\n          isLive: Boolean((<any>i).isLive),\n          uploader: {\n            name: i.author?.name,\n            url:\n              (<any>i).author?.url || (<any>i).author?.channelID\n                ? `https://www.youtube.com/channel/${(<any>i).author.channelID}`\n                : undefined,\n          },\n        }),\n    );\n    super(\n      {\n        source: \"youtube\",\n        id: info.id,\n        name: info.title,\n        url: info.url,\n        thumbnail: (<any>info).thumbnail?.url,\n        songs,\n      },\n      options,\n    );\n  }\n}\n\nexport class YouTubeRelatedSong extends Song {\n  constructor(plugin: YouTubePlugin, info: ytdl.relatedVideo) {\n    if (!info.id) throw new DisTubeError(\"CANNOT_RESOLVE_SONG\", info);\n    super({\n      plugin,\n      source: \"youtube\",\n      playFromSource: true,\n      id: info.id,\n      name: info.title,\n      url: `https://youtu.be/${info.id}`,\n      thumbnail: info.thumbnails?.sort((a, b) => b.width - a.width)?.[0]?.url,\n      isLive: Boolean(info.isLive),\n      duration: info.isLive ? 0 : toSecond(info.length_seconds),\n      views: parseNumber(info.view_count),\n      uploader:\n        typeof info.author === \"string\"\n          ? {\n              name: info.author,\n            }\n          : {\n              name: info.author?.name || info.author?.user,\n              url:\n                info.author?.channel_url ||\n                info.author?.external_channel_url ||\n                info.author?.user_url ||\n                info.author?.id\n                  ? `https://www.youtube.com/channel/${info.author.id}`\n                  : info.author?.user\n                    ? `https://www.youtube.com/${info.author.user}`\n                    : undefined,\n            },\n    });\n  }\n}\n\n/**\n * Search result types:\n *\n * - `VIDEO` = `\"video\"`\n * - `PLAYLIST` = `\"playlist\"`\n */\nexport enum SearchResultType {\n  VIDEO = \"video\",\n  PLAYLIST = \"playlist\",\n}\n\n/**\n * A class representing a video search result.\n */\nexport class YouTubeSearchResultSong extends Song {\n  constructor(plugin: YouTubePlugin, info: ytsr.Video) {\n    super({\n      plugin,\n      source: \"youtube\",\n      playFromSource: true,\n      id: info.id,\n      name: info.name,\n      url: `https://youtu.be/${info.id}`,\n      thumbnail: info.thumbnail,\n      isLive: info.isLive,\n      duration: toSecond(info.duration),\n      views: parseNumber(info.views),\n      uploader: {\n        name: info.author?.name,\n        url: info.author?.url,\n      },\n    });\n  }\n}\n\n/**\n * A class representing a playlist search result.\n */\nexport class YouTubeSearchResultPlaylist {\n  /**\n   * YouTube  playlist id\n   */\n  id: string;\n  /**\n   * Playlist title.\n   */\n  name: string;\n  /**\n   * Playlist URL.\n   */\n  url: string;\n  /**\n   * Playlist owner\n   */\n  uploader: {\n    name?: string;\n    url?: string;\n  };\n  /**\n   * Number of videos in the playlist\n   */\n  length: number;\n  constructor(info: ytsr.Playlist) {\n    this.id = info.id;\n    this.name = info.name;\n    this.url = `https://www.youtube.com/playlist?list=${info.id}`;\n    this.uploader = {\n      name: info.owner?.name,\n      url: info.owner?.url,\n    };\n    this.length = info.length;\n    this.uploader = {\n      name: info.owner?.name,\n      url: info.owner?.url,\n    };\n  }\n}\n","export const clone = <T>(obj: T): T => {\n  const result: T = <T>(Array.isArray(obj) ? [] : {});\n  for (const key in obj) {\n    result[key] = typeof obj[key] === \"object\" ? clone(obj[key]) : obj[key];\n  }\n  return result;\n};\n\n/**\n * Convert formatted duration to seconds\n * @param input - Formatted duration string\n */\nexport function toSecond(input: any): number {\n  if (!input) return 0;\n  if (typeof input !== \"string\") return Number(input) || 0;\n  if (input.includes(\":\")) {\n    const time = input.split(\":\").reverse();\n    let seconds = 0;\n    for (let i = 0; i < 3; i++) if (time[i]) seconds += Number(time[i].replace(/[^\\d.]+/g, \"\")) * Math.pow(60, i);\n    if (time.length > 3) seconds += Number(time[3].replace(/[^\\d.]+/g, \"\")) * 24 * 60 * 60;\n    return seconds;\n  } else {\n    return Number(input.replace(/[^\\d.]+/g, \"\")) || 0;\n  }\n}\n/**\n * Parse number from input\n * @param input - Input\n */\nexport function parseNumber(input: any): number {\n  if (typeof input === \"string\") return Number(input.replace(/[^\\d.]+/g, \"\")) || 0;\n  return Number(input) || 0;\n}\n"],"mappings":"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","names":["ytdl","ytpl","ytsr","SearchResultType"]}